Muitos devem ter notado que no nosso código, para armazenar um CPF de 11 dígitos, estamos usando um array de char de tamanho 13 (char cpf[13])
e não 12, que seria o mínimo necessário (11 para os dígitos + 1 para o \0).

Queria explicar o porquê dessa escolha. É uma técnica de programação defensiva para lidar de forma segura e limpa com a entrada de dados em C.

O Problema Comum: O \n (Enter) no Buffer

Quando usamos funções como scanf ou fgets para ler dados do teclado, o usuário digita a informação e aperta "Enter". Esse "Enter" é um caractere,
o \n (nova linha), que também vai para o buffer de entrada. Se não o removermos, ele pode ser lido pela próxima função de entrada, causando um 
comportamento inesperado no programa.

Nossa Estratégia: Ler e Descartar o \n

Nossa abordagem resolve isso de forma elegante:

1.  Alocação Inteligente: Declaramos char cpf[13]. Isso nos dá espaço para:
    * 11 bytes para os dígitos do CPF.
    * 1 byte para o caractere \n que o fgets vai ler.
    * 1 byte para o caractere nulo \0 que o fgets sempre coloca no final.
    * Total: 13 bytes.

2.  Leitura Segura com fgets: Usamos fgets(cpf, 13, stdin). Essa função lê os dados do buffer.
    * Se o usuário digita 11 dígitos e aperta Enter: fgets lê os 11 dígitos e o \n, limpando o buffer. A string fica como "12345678901\n\0".
    * Se o usuário digita mais de 11 dígitos: fgets lê apenas os 12 primeiros caracteres. O \n não entra na nossa string, e o restante da entrada
    (incluindo o Enter) fica "preso" no teclado. É por isso que no código temos a verificação "if (strchr(...) == NULL)" para chamar a função
    apaga_buffer() e limpar essa sujeira.  Depois disso, peço um CPF válido novamente, sem nenhum buffer atrapalhando.

3.  Substituição do \n: No caso de sucesso (entrada com 11 dígitos), precisamos remover o \n. Fazemos isso com a linha:
    
    dados->cpf[strcspn(dados->cpf, "\n")] = '\0';
    
    Isso substitui o \n por um \0, finalizando a string no lugar certo.

Resultado Final:

No caso de sucesso, a memória fica com dois \0 seguidos (... '1', '\0', '\0'). Isso não é um problema, pois todas as funções de string em C
param no primeiro \0 que encontram. Ficando com a quantidade de caracteres que queremos.

Generalização da Lógica

Essa mesma lógica de tratamento de entrada (alocar espaço extra, ler com fgets, verificar a presença do \n e limpar o buffer se necessário)
se aplica a todos os outros campos de texto do projeto, como nome, senha, pergunta e resposta. Isso garante que o programa seja robusto e
livre de erros de buffer em todas as suas entradas.